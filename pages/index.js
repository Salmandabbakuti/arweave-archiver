import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { Web3Provider } from '@ethersproject/providers';
import { WebBundlr } from '@bundlr-network/client';
import styles from '../styles/Home.module.css';

const isValidUrl = (url) => /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_+.~#?&//=]*)/g.test(url);

export default function Home() {
  const [inputUrl, setInputUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [logMessage, setLogMessage] = useState("");
  const [archiveUrl, setArchiveUrl] = useState("");
  const [provider, setProvider] = useState(null);

  const handleConnect = async () => {
    if (window?.ethereum) {
      const accounts = await window.ethereum.request({
        method: 'eth_requestAccounts',
      });
      console.log("Using account: ", accounts[0]);
      const provider = new Web3Provider(window.ethereum);
      const { chainId } = await provider.getNetwork();
      console.log('chainId:', chainId);
      setProvider(provider);
      setLogMessage("Wallet connected");
    } else {
      console.log("Please use Web3 enabled browser");
      setLogMessage("Please use Web3 enabled browser");
    }
  };

  const handleArchiveSubmit = async () => {
    if (!provider) return setLogMessage("Please connect your wallet first!");
    if (!inputUrl || /^\s*$/.test(inputUrl)) return setLogMessage("Please enter URL");
    // check if url is valid and if it is, archive 
    if (!isValidUrl(inputUrl)) return setLogMessage("Please enter a valid URL");
    setLogMessage("");
    setArchiveUrl("");
    setLoading(true);
    try {
      // get html text from entered url
      const response = await fetch('/api/getContent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: inputUrl }),
      });

      // check if response is ok
      if (!response.ok) return setLogMessage(`Error while fetching content from website: ${response.statusText}`);
      const html = await response.text();

      // bundlr instance
      const bundlr = new WebBundlr("https://testnet1.bundlr.network", "matic", provider);
      await bundlr.ready();

      // archive html
      const tx = await bundlr.uploader.uploadData(html, { tags: [{ name: "Content-Type", value: "text/html" }] });
      console.log('upload tx->:', tx);

      // get archive url
      const archiveUrl = `https://arweave.net/${tx.id}`; // archiveUrl to access file;
      console.log('archiveUrl->:', archiveUrl);
      setArchiveUrl(archiveUrl);
      setLoading(false);
      setInputUrl("");
    } catch (err) {
      console.log('Error while archiving:', err);
      setLogMessage(`Error while archiving: ${err.message}`);
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Arweave Archiver</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <span>Arweave Archiver</span>
        </h1>

        <p className={styles.description}>
          Archive any webpage on Arweave. That last at least 200 years or as long as the network exists
        </p>
        {/* input box with submit button */}
        <div className={styles.archiveContainer}>
          <input className={styles.input} type="text" placeholder="Enter your website URL" onChange={(e) => setInputUrl(e.target.value)} />
          <button className={styles.button} onClick={provider ? handleArchiveSubmit : handleConnect}>{provider ? "Archive" : "Connect Wallet"}</button>
        </div>
        {loading && <p>Loading...</p>}
        {archiveUrl && <p>Archive URL: <a href={archiveUrl} rel="noreferrer" target="_blank">{archiveUrl}</a></p>}
        <p>
          {logMessage}
        </p>
      </main>

      <footer className={styles.footer}>
        <a href="https://github.com/Salmandabbakuti" target="_blank" rel="noopener noreferrer">
          Â© 2022 Salman Dabbakuti. Built with Arweave & Bundlr
        </a>
      </footer>
    </div>
  );
}
